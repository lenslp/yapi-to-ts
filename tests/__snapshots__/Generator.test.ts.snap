// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator 只生成类型代码并写入文件: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成类型代码并写入文件: 输出内容 1`] = `
Array [
  "

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}",
]
`;

exports[`Generator 只生成请求数据的 JSON Schema: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {id: {type: 'string', description: 'ID', additionalProperties: false}},
    required: ['id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x'],
    properties: {
      x: {type: 'string', description: 'X 值', additionalProperties: false},
      y: {type: 'string', description: 'Y 值', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      id: {type: 'integer', description: '1', additionalProperties: false},
      name: {type: 'string', description: '\\"方剑成\\"', additionalProperties: false},
      likes: {
        type: 'array',
        items: {type: 'string', description: '\\"photo\\"', additionalProperties: false},
        description: '[\\"photo\\",2]',
        additionalProperties: false,
        minItems: 0,
      },
      nest: {
        type: 'object',
        properties: {
          x: {type: 'integer', description: '1', additionalProperties: false},
          y: {
            type: 'object',
            properties: {z: {type: 'string', description: '\\"2\\"', additionalProperties: false}},
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      page: {type: 'number', description: '页码', additionalProperties: false},
      limit: {type: 'number', description: '每页数量', additionalProperties: false},
      keyword: {type: 'string', description: '关键词', additionalProperties: false},
    },
    required: ['page', 'limit'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值', additionalProperties: false},
      id: {type: 'string', description: '', additionalProperties: false},
      namre: {type: 'string', description: '', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值', additionalProperties: false},
      id: {type: 'string', description: '', additionalProperties: false},
      namre: {type: 'string', description: '', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {type: 'object', required: [], properties: {}, additionalProperties: false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['id', 'name', 'pass', 'test', 'avatar'],
    properties: {
      id: {type: 'string', description: '23', additionalProperties: false},
      name: {type: 'string', description: '', additionalProperties: false},
      pass: {type: 'string', description: '', additionalProperties: false},
      test: {type: 'string', description: '', additionalProperties: false},
      avatar: {type: 'string', description: '', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1', additionalProperties: false},
      K2: {type: 'number', description: '键2', additionalProperties: false},
      hihihi: {type: 'string', description: '嗨咯', additionalProperties: false},
      id: {type: 'string', description: 'ID', additionalProperties: false},
    },
    required: ['K1', 'hihihi', 'id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['file', 'name'],
    properties: {
      file: {type: 'file', description: '文件', tsType: 'FileData', additionalProperties: false},
      name: {type: 'string', description: '名称', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1', additionalProperties: false},
      K2: {type: 'number', description: '键2', additionalProperties: false},
      cid: {type: 'string', description: 'cid', additionalProperties: false},
    },
    required: ['K1', 'cid'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1', additionalProperties: false},
      K2: {type: 'number', description: '键2', additionalProperties: false},
      query: {type: 'string', description: '22222', additionalProperties: false},
      hihihi: {type: 'string', description: '嗨咯', additionalProperties: false},
      id: {type: 'string', description: 'ID', additionalProperties: false},
      hihihi_1608478638207: {type: 'string', description: '', additionalProperties: false},
    },
    required: ['K1', 'hihihi', 'id', 'hihihi_1608478638207'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成请求数据的 JSON Schema: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\",\\"additionalProperties\\":false}},\\"required\\":[\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\",\\"additionalProperties\\":false},\\"y\\":{\\"type\\":\\"string\\",\\"description\\":\\"Y 值\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\",\\"additionalProperties\\":false},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"方剑成\\\\\\"\\",\\"additionalProperties\\":false},\\"likes\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"photo\\\\\\"\\",\\"additionalProperties\\":false},\\"description\\":\\"[\\\\\\"photo\\\\\\",2]\\",\\"additionalProperties\\":false,\\"minItems\\":0},\\"nest\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"x\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\",\\"additionalProperties\\":false},\\"y\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"z\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"2\\\\\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"page\\":{\\"type\\":\\"number\\",\\"description\\":\\"页码\\",\\"additionalProperties\\":false},\\"limit\\":{\\"type\\":\\"number\\",\\"description\\":\\"每页数量\\",\\"additionalProperties\\":false},\\"keyword\\":{\\"type\\":\\"string\\",\\"description\\":\\"关键词\\",\\"additionalProperties\\":false}},\\"required\\":[\\"page\\",\\"limit\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[],\\"properties\\":{},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"23\\",\\"additionalProperties\\":false},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"pass\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"test\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"avatar\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\",\\"additionalProperties\\":false},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\",\\"additionalProperties\\":false},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\",\\"additionalProperties\\":false}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"file\\",\\"name\\"],\\"properties\\":{\\"file\\":{\\"type\\":\\"file\\",\\"description\\":\\"文件\\",\\"tsType\\":\\"FileData\\",\\"additionalProperties\\":false},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"名称\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\",\\"additionalProperties\\":false},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\",\\"additionalProperties\\":false},\\"cid\\":{\\"type\\":\\"string\\",\\"description\\":\\"cid\\",\\"additionalProperties\\":false}},\\"required\\":[\\"K1\\",\\"cid\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\",\\"additionalProperties\\":false},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\",\\"additionalProperties\\":false},\\"query\\":{\\"type\\":\\"string\\",\\"description\\":\\"22222\\",\\"additionalProperties\\":false},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\",\\"additionalProperties\\":false},\\"hihihi_1608478638207\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
]
`;

exports[`Generator 只生成返回数据的 JSON Schema: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {result: {type: 'number', description: '结果', additionalProperties: false}},
    required: ['result'],
    additionalProperties: false,
  },
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    template: {id: 1, age: '@float', name: '@name'},
    type: 'object',
    rule: {},
    path: ['ROOT'],
    properties: {
      id: {name: 'id', template: 1, type: 'number', rule: {}, path: ['ROOT', 'id'], additionalProperties: false},
      age: {
        name: 'age',
        template: '@float',
        type: 'string',
        rule: {},
        path: ['ROOT', 'age'],
        additionalProperties: false,
      },
      name: {
        name: 'name',
        template: '@name',
        type: 'string',
        rule: {},
        path: ['ROOT', 'name'],
        additionalProperties: false,
      },
    },
    additionalProperties: false,
  },
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      list: {
        type: 'array',
        items: {
          type: 'object',
          properties: {name: {type: 'string', description: '姓名', additionalProperties: false}},
          required: ['name'],
          additionalProperties: false,
        },
        description: '列表',
        additionalProperties: false,
        minItems: 0,
      },
    },
    required: ['list'],
    additionalProperties: false,
  },
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误', additionalProperties: false},
      msg: {type: 'string', description: '错误详情', additionalProperties: false},
      data: {type: 'object', properties: {}, description: '数据', additionalProperties: false},
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误', additionalProperties: false},
      msg: {type: 'string', description: '错误详情', additionalProperties: false},
      data: {
        type: 'object',
        properties: {success: {type: 'boolean', description: '成功啦', additionalProperties: false}},
        description: '数据',
        required: ['success'],
        additionalProperties: false,
      },
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成返回数据的 JSON Schema: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"result\\":{\\"type\\":\\"number\\",\\"description\\":\\"结果\\",\\"additionalProperties\\":false}},\\"required\\":[\\"result\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"template\\":{\\"id\\":1,\\"age\\":\\"@float\\",\\"name\\":\\"@name\\"},\\"type\\":\\"object\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\"],\\"properties\\":{\\"id\\":{\\"name\\":\\"id\\",\\"template\\":1,\\"type\\":\\"number\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"id\\"],\\"additionalProperties\\":false},\\"age\\":{\\"name\\":\\"age\\",\\"template\\":\\"@float\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"age\\"],\\"additionalProperties\\":false},\\"name\\":{\\"name\\":\\"name\\",\\"template\\":\\"@name\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"name\\"],\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"list\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"姓名\\",\\"additionalProperties\\":false}},\\"required\\":[\\"name\\"],\\"additionalProperties\\":false},\\"description\\":\\"列表\\",\\"additionalProperties\\":false,\\"minItems\\":0}},\\"required\\":[\\"list\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\",\\"additionalProperties\\":false},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\",\\"additionalProperties\\":false},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{},\\"description\\":\\"数据\\",\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\",\\"additionalProperties\\":false},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\",\\"additionalProperties\\":false},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"success\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"成功啦\\",\\"additionalProperties\\":false}},\\"description\\":\\"数据\\",\\"required\\":[\\"success\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
]
`;

exports[`Generator 支持将 token 设为数组: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

const mockUrl_0_1_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_1_0_0 = '' as any
const prodUrl_0_1_0_0 = 'http://prod.com/' as any
const dataKey_0_1_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 支持将 token 设为数组: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 支持将 token 设为数组: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
  "const mockUrl_0_1_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_1_0_0 = \\"\\" as any
const prodUrl_0_1_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_1_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
]
`;

exports[`Generator 支持项目设置里的接口基本路径: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 支持项目设置里的接口基本路径: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 支持项目设置里的接口基本路径: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/issue-17/picture_3d_detail_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/issue-17/picture_3d_detail_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<
  Picture_3dDetailTestRequest,
  Picture_3dDetailTestResponse,
  Picture_3dDetailTestRequestConfig
>(picture_3dDetailTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestRequest {
  a: string
  b: string
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
type GetTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/get_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/28/get_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export const getTest = makeRequest<GetTestRequest, GetTestResponse, GetTestRequestConfig>(getTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestRequest {
  a: string
  b: string
  c: string
  'd   e': string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
type FormTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/form_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/28/post/form_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export const formTest = makeRequest<FormTestRequest, FormTestResponse, FormTestRequestConfig>(formTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestRequest {
  a: string
  b: string
  'c   d': string
  e: {
    f: string
  }
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestResponse {
  a?: number
  b?: string
  c?: {
    d?: string
  }
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
type JsonTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/json_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/28/post/json_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export const jsonTest = makeRequest<JsonTestRequest, JsonTestResponse, JsonTestRequestConfig>(jsonTestRequestConfig)

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_3 = '' as any
const prodUrl_0_0_0_3 = 'http://prod.com/' as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get2_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/get2_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<Picture_3dDetailTestRequest, Picture_3dDetailTestResponse, Picture_3dDetailTestRequestConfig>(picture_3dDetailTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export const getTest = makeRequest<GetTestRequest, GetTestResponse, GetTestRequestConfig>(getTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export const formTest = makeRequest<FormTestRequest, FormTestResponse, FormTestRequestConfig>(formTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export const jsonTest = makeRequest<JsonTestRequest, JsonTestResponse, JsonTestRequestConfig>(jsonTestRequestConfig)",
  "",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
  "const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get2_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/get2_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)",
]
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/issue-17/picture_3d_detail_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/issue-17/picture_3d_detail_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<
  Picture_3dDetailTestRequest,
  Picture_3dDetailTestResponse,
  Picture_3dDetailTestRequestConfig
>(picture_3dDetailTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestRequest {
  a: string
  b: string
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
type GetTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/get_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/28/get_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export const getTest = makeRequest<GetTestRequest, GetTestResponse, GetTestRequestConfig>(getTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestRequest {
  a: string
  b: string
  c: string
  'd   e': string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
type FormTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/form_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/28/post/form_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export const formTest = makeRequest<FormTestRequest, FormTestResponse, FormTestRequestConfig>(formTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestRequest {
  a: string
  b: string
  'c   d': string
  e: {
    f: string
  }
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestResponse {
  a?: number
  b?: string
  c?: {
    d?: string
  }
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
type JsonTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/json_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/28/post/json_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export const jsonTest = makeRequest<JsonTestRequest, JsonTestResponse, JsonTestRequestConfig>(jsonTestRequestConfig)

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get2_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/get2_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<Picture_3dDetailTestRequest, Picture_3dDetailTestResponse, Picture_3dDetailTestRequestConfig>(picture_3dDetailTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export const getTest = makeRequest<GetTestRequest, GetTestResponse, GetTestRequestConfig>(getTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export const formTest = makeRequest<FormTestRequest, FormTestResponse, FormTestRequestConfig>(formTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export const jsonTest = makeRequest<JsonTestRequest, JsonTestResponse, JsonTestRequestConfig>(jsonTestRequestConfig)",
  "",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)",
]
`;

exports[`Generator 生成 JavaScript 代码: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */
/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */
// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, prepare } from 'yapi-to-typescript';
// @ts-ignore
import request from './request';
// makeRequest
function makeRequestRequired(requestConfig) {
    const req = function (requestData, ...args) {
        return request(prepare(requestConfig, requestData), ...args);
    };
    req.requestConfig = requestConfig;
    return req;
}
function makeRequestOptional(requestConfig) {
    const req = function (requestData, ...args) {
        return request(prepare(requestConfig, requestData), ...args);
    };
    req.requestConfig = requestConfig;
    return req;
}
function makeRequest(requestConfig) {
    const optional = makeRequestOptional(requestConfig);
    const required = makeRequestRequired(requestConfig);
    return (requestConfig.requestDataOptional ? optional : required);
}
const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32';
const devUrl_0_0_0_0 = '';
const prodUrl_0_0_0_0 = 'http://prod.com/';
const dataKey_0_0_0_0 = undefined;
/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_0,
    devUrl: devUrl_0_0_0_0,
    prodUrl: prodUrl_0_0_0_0,
    path: '/__hello__/issue-17/picture_3d_detail_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_0,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest(picture_3dDetailTestRequestConfig);
/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
const getTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_0,
    devUrl: devUrl_0_0_0_0,
    prodUrl: prodUrl_0_0_0_0,
    path: '/__hello__/28/get_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_0,
    paramNames: [],
    queryNames: ['   a', ' b', 'c ', '    d    e   '],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export const getTest = makeRequest(getTestRequestConfig);
/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
const formTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_0,
    devUrl: devUrl_0_0_0_0,
    prodUrl: prodUrl_0_0_0_0,
    path: '/__hello__/28/post/form_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_0,
    paramNames: [],
    queryNames: ['   a', ' b', 'c ', '    d    e   '],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export const formTest = makeRequest(formTestRequestConfig);
/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
const jsonTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_0,
    devUrl: devUrl_0_0_0_0,
    prodUrl: prodUrl_0_0_0_0,
    path: '/__hello__/28/post/json_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_0,
    paramNames: [],
    queryNames: ['   a', ' b', 'c ', '    d    e   '],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export const jsonTest = makeRequest(jsonTestRequestConfig);
const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32';
const devUrl_0_0_0_2 = '';
const prodUrl_0_0_0_2 = 'http://prod.com/';
const dataKey_0_0_0_2 = undefined;
/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/deleteMethod_test',
    method: Method.DELETE,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest(deleteMethodTestRequestConfig);
/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/getMethod_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: ['x', 'y'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest(getMethodTestRequestConfig);
/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/json5Response_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest(json5ResponseTestRequestConfig);
/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/json5Request_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest(json5RequestTestRequestConfig);
/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/postMethod_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest(postMethodTestRequestConfig);
/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/putMethod_test',
    method: Method.PUT,
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: ['id', 'namre'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest(putMethodTestRequestConfig);
/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/dataKeyExample_test',
    method: Method.PUT,
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: ['id', 'namre'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest(dataKeyExampleTestRequestConfig);
/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/noResponseData_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest(noResponseDataTestRequestConfig);
/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/emptyResponse_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest(emptyResponseTestRequestConfig);
/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest(testTestRequestConfig);
/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/test/{id}/:hihihi_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: ['hihihi', 'id'],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest(hihihiTestRequestConfig);
/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/rawResponse_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.raw,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest(rawResponseTestRequestConfig);
/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/upload_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest(uploadTestRequestConfig);
/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/test_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: ['cid'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest(testTestRequestConfig);
/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
    method: Method.POST,
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
    queryNames: ['query'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest(hihihi_1608478638207TestRequestConfig);
const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32';
const devUrl_0_0_0_3 = '';
const prodUrl_0_0_0_3 = 'http://prod.com/';
const dataKey_0_0_0_3 = undefined;
/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig = {
    mockUrl: mockUrl_0_0_0_3,
    devUrl: devUrl_0_0_0_3,
    prodUrl: prodUrl_0_0_0_3,
    path: '/__hello__/get2_test',
    method: Method.GET,
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_3,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
};
/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest(get2TestRequestConfig);
/* prettier-ignore-end */
"
`;

exports[`Generator 生成 JavaScript 代码: 请求文件 1`] = `
"export default function request(payload, options = {
    server: 'prod',
}) {
    return new Promise((resolve, reject) => {
        // 基本地址
        const baseUrl = options.server === 'mock'
            ? payload.mockUrl
            : options.server === 'dev'
                ? payload.devUrl
                : payload.prodUrl;
        // 请求地址
        const url = \`\${baseUrl}\${payload.path}\`;
        // 具体请求逻辑
    });
}
"
`;

exports[`Generator 生成 JavaScript 代码: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/27/interface/api/870) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1575455147
 */
export const picture_3dDetailTest = makeRequest<Picture_3dDetailTestRequest, Picture_3dDetailTestResponse, Picture_3dDetailTestRequestConfig>(picture_3dDetailTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/27/interface/api/972) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1589249547
 */
export const getTest = makeRequest<GetTestRequest, GetTestResponse, GetTestRequestConfig>(getTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/27/interface/api/978) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1589249694
 */
export const formTest = makeRequest<FormTestRequest, FormTestResponse, FormTestRequestConfig>(formTestRequestConfig)

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/27/interface/api/984) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/27/interface/api/cat_151)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1589249798
 */
export const jsonTest = makeRequest<JsonTestRequest, JsonTestResponse, JsonTestRequestConfig>(jsonTestRequestConfig)",
  "",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
  "const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/27/interface/api/445) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/27/interface/api/cat_87)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1575945946
 */
export const get2Test = makeRequest<Get2TestRequest, Get2TestResponse, Get2TestRequestConfig>(get2TestRequestConfig)",
]
`;

exports[`Generator 生成 React Hooks 代码: Hook 生成文件 1`] = `
"import { useState, useEffect } from 'react'
import { RequestConfig } from 'yapi-to-typescript'
import { Request } from \\"./index\\"
import baseRequest from \\"./request\\"

export default function makeRequestHook<TRequestData, TRequestConfig extends RequestConfig, TRequestResult extends ReturnType<typeof baseRequest>>(request: Request<TRequestData, TRequestConfig, TRequestResult>) {
  type Data = TRequestResult extends Promise<infer R> ? R : TRequestResult
  return function useRequest(requestData: TRequestData) {
    // 一个简单的 Hook 实现，实际项目可结合其他库使用，比如：
    // @umijs/hooks 的 useRequest (https://github.com/umijs/hooks)
    // swr (https://github.com/zeit/swr)

    const [loading, setLoading] = useState(true)
    const [data, setData] = useState<Data>()

    useEffect(() => {
      request(requestData).then(data => {
        setLoading(false)
        setData(data as any)
      })
    }, [JSON.stringify(requestData)])

    return {
      loading,
      data,
    }
  }
}"
`;

exports[`Generator 生成 React Hooks 代码: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'
// @ts-ignore
import makeRequestHook from './makeRequestHook'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const useDeleteMethodTest = makeRequestHook<
  DeleteMethodTestRequest,
  DeleteMethodTestRequestConfig,
  ReturnType<typeof deleteMethodTest>
>(deleteMethodTest)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const useGetMethodTest = makeRequestHook<
  GetMethodTestRequest,
  GetMethodTestRequestConfig,
  ReturnType<typeof getMethodTest>
>(getMethodTest)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const useJson5ResponseTest = makeRequestHook<
  Json5ResponseTestRequest,
  Json5ResponseTestRequestConfig,
  ReturnType<typeof json5ResponseTest>
>(json5ResponseTest)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const useJson5RequestTest = makeRequestHook<
  Json5RequestTestRequest,
  Json5RequestTestRequestConfig,
  ReturnType<typeof json5RequestTest>
>(json5RequestTest)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const usePostMethodTest = makeRequestHook<
  PostMethodTestRequest,
  PostMethodTestRequestConfig,
  ReturnType<typeof postMethodTest>
>(postMethodTest)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const usePutMethodTest = makeRequestHook<
  PutMethodTestRequest,
  PutMethodTestRequestConfig,
  ReturnType<typeof putMethodTest>
>(putMethodTest)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const useDataKeyExampleTest = makeRequestHook<
  DataKeyExampleTestRequest,
  DataKeyExampleTestRequestConfig,
  ReturnType<typeof dataKeyExampleTest>
>(dataKeyExampleTest)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const useNoResponseDataTest = makeRequestHook<
  NoResponseDataTestRequest,
  NoResponseDataTestRequestConfig,
  ReturnType<typeof noResponseDataTest>
>(noResponseDataTest)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const useEmptyResponseTest = makeRequestHook<
  EmptyResponseTestRequest,
  EmptyResponseTestRequestConfig,
  ReturnType<typeof emptyResponseTest>
>(emptyResponseTest)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(
  testTest,
)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const useHihihiTest = makeRequestHook<HihihiTestRequest, HihihiTestRequestConfig, ReturnType<typeof hihihiTest>>(
  hihihiTest,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const useRawResponseTest = makeRequestHook<
  RawResponseTestRequest,
  RawResponseTestRequestConfig,
  ReturnType<typeof rawResponseTest>
>(rawResponseTest)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const useUploadTest = makeRequestHook<UploadTestRequest, UploadTestRequestConfig, ReturnType<typeof uploadTest>>(
  uploadTest,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(
  testTest,
)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const useHihihi_1608478638207Test = makeRequestHook<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestRequestConfig,
  ReturnType<typeof hihihi_1608478638207Test>
>(hihihi_1608478638207Test)

/* prettier-ignore-end */
"
`;

exports[`Generator 生成 React Hooks 代码: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 生成 React Hooks 代码: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const useDeleteMethodTest = makeRequestHook<DeleteMethodTestRequest, DeleteMethodTestRequestConfig, ReturnType<typeof deleteMethodTest>>(deleteMethodTest)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const useGetMethodTest = makeRequestHook<GetMethodTestRequest, GetMethodTestRequestConfig, ReturnType<typeof getMethodTest>>(getMethodTest)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const useJson5ResponseTest = makeRequestHook<Json5ResponseTestRequest, Json5ResponseTestRequestConfig, ReturnType<typeof json5ResponseTest>>(json5ResponseTest)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const useJson5RequestTest = makeRequestHook<Json5RequestTestRequest, Json5RequestTestRequestConfig, ReturnType<typeof json5RequestTest>>(json5RequestTest)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const usePostMethodTest = makeRequestHook<PostMethodTestRequest, PostMethodTestRequestConfig, ReturnType<typeof postMethodTest>>(postMethodTest)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const usePutMethodTest = makeRequestHook<PutMethodTestRequest, PutMethodTestRequestConfig, ReturnType<typeof putMethodTest>>(putMethodTest)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const useDataKeyExampleTest = makeRequestHook<DataKeyExampleTestRequest, DataKeyExampleTestRequestConfig, ReturnType<typeof dataKeyExampleTest>>(dataKeyExampleTest)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const useNoResponseDataTest = makeRequestHook<NoResponseDataTestRequest, NoResponseDataTestRequestConfig, ReturnType<typeof noResponseDataTest>>(noResponseDataTest)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const useEmptyResponseTest = makeRequestHook<EmptyResponseTestRequest, EmptyResponseTestRequestConfig, ReturnType<typeof emptyResponseTest>>(emptyResponseTest)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(testTest)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const useHihihiTest = makeRequestHook<HihihiTestRequest, HihihiTestRequestConfig, ReturnType<typeof hihihiTest>>(hihihiTest)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const useRawResponseTest = makeRequestHook<RawResponseTestRequest, RawResponseTestRequestConfig, ReturnType<typeof rawResponseTest>>(rawResponseTest)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const useUploadTest = makeRequestHook<UploadTestRequest, UploadTestRequestConfig, ReturnType<typeof uploadTest>>(uploadTest)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(testTest)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const useHihihi_1608478638207Test = makeRequestHook<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestRequestConfig, ReturnType<typeof hihihi_1608478638207Test>>(hihihi_1608478638207Test)",
]
`;

exports[`Generator 生成请求数据和返回数据的 JSON Schema: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

// makeRequest
function makeRequestRequired<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequestOptional<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(
  requestConfig: TRequestConfig,
) {
  const req = function(requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) {
    return request<TResponseData>(prepare(requestConfig, requestData), ...args)
  }
  req.requestConfig = requestConfig
  return req
}
function makeRequest<TReqeustData, TResponseData, TRequestConfig extends RequestConfig>(requestConfig: TRequestConfig) {
  const optional = makeRequestOptional<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  const required = makeRequestRequired<TReqeustData, TResponseData, TRequestConfig>(requestConfig)
  return (requestConfig.requestDataOptional ? optional : required) as TRequestConfig['requestDataOptional'] extends true
    ? typeof optional
    : typeof required
}

// Request
export type Request<
  TReqeustData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TReqeustData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {id: {type: 'string', description: 'ID', additionalProperties: false}},
    required: ['id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<
  DeleteMethodTestRequest,
  DeleteMethodTestResponse,
  DeleteMethodTestRequestConfig
>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x'],
    properties: {
      x: {type: 'string', description: 'X 值', additionalProperties: false},
      y: {type: 'string', description: 'Y 值', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {result: {type: 'number', description: '结果', additionalProperties: false}},
    required: ['result'],
    additionalProperties: false,
  },
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(
  getMethodTestRequestConfig,
)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {
    template: {id: 1, age: '@float', name: '@name'},
    type: 'object',
    rule: {},
    path: ['ROOT'],
    properties: {
      id: {name: 'id', template: 1, type: 'number', rule: {}, path: ['ROOT', 'id'], additionalProperties: false},
      age: {
        name: 'age',
        template: '@float',
        type: 'string',
        rule: {},
        path: ['ROOT', 'age'],
        additionalProperties: false,
      },
      name: {
        name: 'name',
        template: '@name',
        type: 'string',
        rule: {},
        path: ['ROOT', 'name'],
        additionalProperties: false,
      },
    },
    additionalProperties: false,
  },
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<
  Json5ResponseTestRequest,
  Json5ResponseTestResponse,
  Json5ResponseTestRequestConfig
>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      id: {type: 'integer', description: '1', additionalProperties: false},
      name: {type: 'string', description: '\\"方剑成\\"', additionalProperties: false},
      likes: {
        type: 'array',
        items: {type: 'string', description: '\\"photo\\"', additionalProperties: false},
        description: '[\\"photo\\",2]',
        additionalProperties: false,
        minItems: 0,
      },
      nest: {
        type: 'object',
        properties: {
          x: {type: 'integer', description: '1', additionalProperties: false},
          y: {
            type: 'object',
            properties: {z: {type: 'string', description: '\\"2\\"', additionalProperties: false}},
            additionalProperties: false,
          },
        },
        additionalProperties: false,
      },
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<
  Json5RequestTestRequest,
  Json5RequestTestResponse,
  Json5RequestTestRequestConfig
>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      page: {type: 'number', description: '页码', additionalProperties: false},
      limit: {type: 'number', description: '每页数量', additionalProperties: false},
      keyword: {type: 'string', description: '关键词', additionalProperties: false},
    },
    required: ['page', 'limit'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      list: {
        type: 'array',
        items: {
          type: 'object',
          properties: {name: {type: 'string', description: '姓名', additionalProperties: false}},
          required: ['name'],
          additionalProperties: false,
        },
        description: '列表',
        additionalProperties: false,
        minItems: 0,
      },
    },
    required: ['list'],
    additionalProperties: false,
  },
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(
  postMethodTestRequestConfig,
)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值', additionalProperties: false},
      id: {type: 'string', description: '', additionalProperties: false},
      namre: {type: 'string', description: '', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误', additionalProperties: false},
      msg: {type: 'string', description: '错误详情', additionalProperties: false},
      data: {type: 'object', properties: {}, description: '数据', additionalProperties: false},
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(
  putMethodTestRequestConfig,
)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值', additionalProperties: false},
      id: {type: 'string', description: '', additionalProperties: false},
      namre: {type: 'string', description: '', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误', additionalProperties: false},
      msg: {type: 'string', description: '错误详情', additionalProperties: false},
      data: {
        type: 'object',
        properties: {success: {type: 'boolean', description: '成功啦', additionalProperties: false}},
        description: '数据',
        required: ['success'],
        additionalProperties: false,
      },
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<
  DataKeyExampleTestRequest,
  DataKeyExampleTestResponse,
  DataKeyExampleTestRequestConfig
>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<
  NoResponseDataTestRequest,
  NoResponseDataTestResponse,
  NoResponseDataTestRequestConfig
>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {type: 'object', required: [], properties: {}, additionalProperties: false},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<
  EmptyResponseTestRequest,
  EmptyResponseTestResponse,
  EmptyResponseTestRequestConfig
>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['id', 'name', 'pass', 'test', 'avatar'],
    properties: {
      id: {type: 'string', description: '23', additionalProperties: false},
      name: {type: 'string', description: '', additionalProperties: false},
      pass: {type: 'string', description: '', additionalProperties: false},
      test: {type: 'string', description: '', additionalProperties: false},
      avatar: {type: 'string', description: '', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1', additionalProperties: false},
      K2: {type: 'number', description: '键2', additionalProperties: false},
      hihihi: {type: 'string', description: '嗨咯', additionalProperties: false},
      id: {type: 'string', description: 'ID', additionalProperties: false},
    },
    required: ['K1', 'hihihi', 'id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(
  hihihiTestRequestConfig,
)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<
  RawResponseTestRequest,
  RawResponseTestResponse,
  RawResponseTestRequestConfig
>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['file', 'name'],
    properties: {
      file: {type: 'file', description: '文件', tsType: 'FileData', additionalProperties: false},
      name: {type: 'string', description: '名称', additionalProperties: false},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(
  uploadTestRequestConfig,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1', additionalProperties: false},
      K2: {type: 'number', description: '键2', additionalProperties: false},
      cid: {type: 'string', description: 'cid', additionalProperties: false},
    },
    required: ['K1', 'cid'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1', additionalProperties: false},
      K2: {type: 'number', description: '键2', additionalProperties: false},
      query: {type: 'string', description: '22222', additionalProperties: false},
      hihihi: {type: 'string', description: '嗨咯', additionalProperties: false},
      id: {type: 'string', description: 'ID', additionalProperties: false},
      hihihi_1608478638207: {type: 'string', description: '', additionalProperties: false},
    },
    required: ['K1', 'hihihi', 'id', 'hihihi_1608478638207'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestResponse,
  Hihihi_1608478638207TestRequestConfig
>(hihihi_1608478638207TestRequestConfig)

/* prettier-ignore-end */
"
`;

exports[`Generator 生成请求数据和返回数据的 JSON Schema: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\",\\"additionalProperties\\":false}},\\"required\\":[\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/27/interface/api/433) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1568765163
 */
export const deleteMethodTest = makeRequest<DeleteMethodTestRequest, DeleteMethodTestResponse, DeleteMethodTestRequestConfig>(deleteMethodTestRequestConfig)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\",\\"additionalProperties\\":false},\\"y\\":{\\"type\\":\\"string\\",\\"description\\":\\"Y 值\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"result\\":{\\"type\\":\\"number\\",\\"description\\":\\"结果\\",\\"additionalProperties\\":false}},\\"required\\":[\\"result\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/27/interface/api/434) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1568765164
 */
export const getMethodTest = makeRequest<GetMethodTestRequest, GetMethodTestResponse, GetMethodTestRequestConfig>(getMethodTestRequestConfig)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {\\"template\\":{\\"id\\":1,\\"age\\":\\"@float\\",\\"name\\":\\"@name\\"},\\"type\\":\\"object\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\"],\\"properties\\":{\\"id\\":{\\"name\\":\\"id\\",\\"template\\":1,\\"type\\":\\"number\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"id\\"],\\"additionalProperties\\":false},\\"age\\":{\\"name\\":\\"age\\",\\"template\\":\\"@float\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"age\\"],\\"additionalProperties\\":false},\\"name\\":{\\"name\\":\\"name\\",\\"template\\":\\"@name\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"name\\"],\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/27/interface/api/435) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1568765164
 */
export const json5ResponseTest = makeRequest<Json5ResponseTestRequest, Json5ResponseTestResponse, Json5ResponseTestRequestConfig>(json5ResponseTestRequestConfig)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\",\\"additionalProperties\\":false},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"方剑成\\\\\\"\\",\\"additionalProperties\\":false},\\"likes\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"photo\\\\\\"\\",\\"additionalProperties\\":false},\\"description\\":\\"[\\\\\\"photo\\\\\\",2]\\",\\"additionalProperties\\":false,\\"minItems\\":0},\\"nest\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"x\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\",\\"additionalProperties\\":false},\\"y\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"z\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"2\\\\\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/27/interface/api/436) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1597035132
 */
export const json5RequestTest = makeRequest<Json5RequestTestRequest, Json5RequestTestResponse, Json5RequestTestRequestConfig>(json5RequestTestRequestConfig)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"page\\":{\\"type\\":\\"number\\",\\"description\\":\\"页码\\",\\"additionalProperties\\":false},\\"limit\\":{\\"type\\":\\"number\\",\\"description\\":\\"每页数量\\",\\"additionalProperties\\":false},\\"keyword\\":{\\"type\\":\\"string\\",\\"description\\":\\"关键词\\",\\"additionalProperties\\":false}},\\"required\\":[\\"page\\",\\"limit\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"list\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"姓名\\",\\"additionalProperties\\":false}},\\"required\\":[\\"name\\"],\\"additionalProperties\\":false},\\"description\\":\\"列表\\",\\"additionalProperties\\":false,\\"minItems\\":0}},\\"required\\":[\\"list\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/27/interface/api/437) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1568765164
 */
export const postMethodTest = makeRequest<PostMethodTestRequest, PostMethodTestResponse, PostMethodTestRequestConfig>(postMethodTestRequestConfig)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\",\\"additionalProperties\\":false},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\",\\"additionalProperties\\":false},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{},\\"description\\":\\"数据\\",\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/27/interface/api/438) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1568765164
 */
export const putMethodTest = makeRequest<PutMethodTestRequest, PutMethodTestResponse, PutMethodTestRequestConfig>(putMethodTestRequestConfig)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\",\\"additionalProperties\\":false},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\",\\"additionalProperties\\":false},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"success\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"成功啦\\",\\"additionalProperties\\":false}},\\"description\\":\\"数据\\",\\"required\\":[\\"success\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/27/interface/api/439) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1568765165
 */
export const dataKeyExampleTest = makeRequest<DataKeyExampleTestRequest, DataKeyExampleTestResponse, DataKeyExampleTestRequestConfig>(dataKeyExampleTestRequestConfig)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/27/interface/api/440) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1568765165
 */
export const noResponseDataTest = makeRequest<NoResponseDataTestRequest, NoResponseDataTestResponse, NoResponseDataTestRequestConfig>(noResponseDataTestRequestConfig)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[],\\"properties\\":{},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/27/interface/api/441) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1568765165
 */
export const emptyResponseTest = makeRequest<EmptyResponseTestRequest, EmptyResponseTestResponse, EmptyResponseTestRequestConfig>(emptyResponseTestRequestConfig)

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"23\\",\\"additionalProperties\\":false},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"pass\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"test\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false},\\"avatar\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/27/interface/api/442) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1568765165
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\",\\"additionalProperties\\":false},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\",\\"additionalProperties\\":false},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\",\\"additionalProperties\\":false}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/27/interface/api/443) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1568765165
 */
export const hihihiTest = makeRequest<HihihiTestRequest, HihihiTestResponse, HihihiTestRequestConfig>(hihihiTestRequestConfig)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/27/interface/api/444) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1568765166
 */
export const rawResponseTest = makeRequest<RawResponseTestRequest, RawResponseTestResponse, RawResponseTestRequestConfig>(rawResponseTestRequestConfig)

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"file\\",\\"name\\"],\\"properties\\":{\\"file\\":{\\"type\\":\\"file\\",\\"description\\":\\"文件\\",\\"tsType\\":\\"FileData\\",\\"additionalProperties\\":false},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"名称\\",\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
}

/**
 * 接口 [文件↗](http://foo.bar/project/27/interface/api/887) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1582161261
 */
export const uploadTest = makeRequest<UploadTestRequest, UploadTestResponse, UploadTestRequestConfig>(uploadTestRequestConfig)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\",\\"additionalProperties\\":false},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\",\\"additionalProperties\\":false},\\"cid\\":{\\"type\\":\\"string\\",\\"description\\":\\"cid\\",\\"additionalProperties\\":false}},\\"required\\":[\\"K1\\",\\"cid\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/27/interface/api/2741) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1608477677
 */
export const testTest = makeRequest<TestTestRequest, TestTestResponse, TestTestRequestConfig>(testTestRequestConfig)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\",\\"additionalProperties\\":false},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\",\\"additionalProperties\\":false},\\"query\\":{\\"type\\":\\"string\\",\\"description\\":\\"22222\\",\\"additionalProperties\\":false},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\",\\"additionalProperties\\":false},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\",\\"additionalProperties\\":false},\\"hihihi_1608478638207\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\",\\"additionalProperties\\":false}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/27/interface/api/2745) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/27/interface/api/cat_82)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1608478667
 */
export const hihihi_1608478638207Test = makeRequest<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestResponse, Hihihi_1608478638207TestRequestConfig>(hihihi_1608478638207TestRequestConfig)",
]
`;
